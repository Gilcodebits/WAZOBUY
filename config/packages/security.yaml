security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        oauth:
            entity:
                class: App\Entity\Utilisateur
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            entry_point: form_login
            oauth:
                resource_owners:
                    google:           "/login/oauth/google"
                    facebook:         "/login/oauth/facebook"
                login_path:        /connexion
                failure_path:      /connexion
                oauth_user_provider:
                    service: App\Security\OAuthUserProvider
                check_path: /login/oauth/check-google
            form_login:
                login_path: /connexion
                check_path: /connexion
                success_handler: App\Security\AuthenticationHandler
                default_target_path: /app_home
                target_path_parameter: _target_path
                use_referer: true
                enable_csrf: true
                csrf_token_id: authenticate
                use_forward: false
                post_only: true
            logout:
                path:   /deconnexion
                target: /

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/dashboard, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
